name: Release and Publish

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest black isort
    
    - name: Format check with black
      run: black --check pytrilium/
    
    - name: Import order check with isort
      run: isort --check-only pytrilium/
    
    - name: Test imports
      run: python -c "from pytrilium.PyTrilium import PyTrilium; print('Import test passed')"

  build-and-publish:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write  # For trusted publishing to PyPI
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for changelog generation
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"
    
    - name: Extract version from tag
      run: |
        echo "RELEASE_VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV
        echo "TAG_NAME=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
    
    - name: Verify version consistency
      run: |
        PYPROJECT_VERSION=$(grep "^version = " pyproject.toml | sed 's/version = "\(.*\)"/\1/')
        
        echo "Tag version: $RELEASE_VERSION"
        echo "pyproject.toml version: $PYPROJECT_VERSION"
        
        if [ "$RELEASE_VERSION" != "$PYPROJECT_VERSION" ]; then
          echo "❌ Version mismatch: tag ($RELEASE_VERSION) != pyproject.toml ($PYPROJECT_VERSION)"
          exit 1
        fi
        
        echo "✅ Version matches: $RELEASE_VERSION"
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install build twine
    
    - name: Build package
      run: python -m build
    
    - name: Check package
      run: python -m twine check dist/*
    
    - name: Generate changelog
      id: changelog
      run: |
        # Get commits since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
        if [ -z "$LAST_TAG" ]; then
          echo "## Changes" > CHANGELOG.md
          echo "Initial release with complete Trilium ETAPI coverage" >> CHANGELOG.md
        else
          echo "## Changes since $LAST_TAG" > CHANGELOG.md
          git log --pretty=format:"- %s (%h)" $LAST_TAG..HEAD >> CHANGELOG.md
        fi
        
        # Set output for GitHub release
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        cat CHANGELOG.md >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        # Use trusted publishers instead of API token for better security
        # You'll need to configure this in your PyPI project settings
        # Fallback to API token if trusted publishing isn't set up
        password: ${{ secrets.PYPI_API_TOKEN }}
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ env.TAG_NAME }}
        name: Release ${{ env.TAG_NAME }}
        body: ${{ steps.changelog.outputs.changelog }}
        files: |
          dist/*.whl
          dist/*.tar.gz
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update-docs:
    needs: build-and-publish
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    
    - name: Update installation command in README
      run: |
        # Update the pip install command to include the latest version
        sed -i "s/pip install pytrilium/pip install pytrilium==${{ env.RELEASE_VERSION }}/g" README.md || true
    
    - name: Commit documentation updates
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        if git diff --quiet; then
          echo "No documentation changes to commit"
        else
          git add README.md
          git commit -m "docs: update installation command for v${{ env.RELEASE_VERSION }}"
          git push origin main || git push origin master
        fi
      env:
        RELEASE_VERSION: ${{ env.RELEASE_VERSION }}