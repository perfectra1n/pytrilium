name: Test and Lint

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest black isort flake8
    
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 pytrilium/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 pytrilium/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Format check with black
      run: black --check pytrilium/
    
    - name: Import order check with isort
      run: isort --check-only pytrilium/
    
    - name: Test imports and basic functionality
      run: |
        python -c "from pytrilium.PyTrilium import PyTrilium; print('✅ Main import successful')"
        python -c "from pytrilium.PyTriliumAttachmentClient import PyTriliumAttachmentClient; print('✅ Attachment client import successful')"
        python -c "from pytrilium.PyTriliumAttributeClient import PyTriliumAttributeClient; print('✅ Attribute client import successful')"
        python -c "from pytrilium.PyTriliumBranchClient import PyTriliumBranchClient; print('✅ Branch client import successful')"
        python -c "from pytrilium.PyTriliumCalendarClient import PyTriliumCalendarClient; print('✅ Calendar client import successful')"
        python -c "from pytrilium.PyTriliumNoteClient import PyTriliumNoteClient; print('✅ Note client import successful')"

  version-check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Check version format
      run: |
        PYPROJECT_VERSION=$(grep "^version = " pyproject.toml | sed 's/version = "\(.*\)"/\1/')
        
        echo "pyproject.toml version: $PYPROJECT_VERSION"
        
        # Verify version follows semantic versioning
        if ! echo "$PYPROJECT_VERSION" | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$' > /dev/null; then
          echo "❌ Version $PYPROJECT_VERSION does not follow semantic versioning (X.Y.Z)"
          exit 1
        fi
        
        echo "✅ Version format is valid: $PYPROJECT_VERSION"